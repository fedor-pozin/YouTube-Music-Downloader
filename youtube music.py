import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import yt_dlp
from config import TG_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = TG_TOKEN  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è yt-dlp –ë–ï–ó FFmpeg
ydl_opts = {
    'format': 'bestaudio/best',  # –õ—É—á—à–∏–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
    'outtmpl': '%(title)s.%(ext)s',
    'retries': 3,
    'socket_timeout': 30,
    'quiet': True,
    'no_warnings': True,
    'extract_audio': True,  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
    'keepvideo': False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ
    'noplaylist': True,  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –≤–∏–¥–µ–æ
    'http_headers': {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    }
}


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üéµ <b>YouTube Audio Downloader</b>\n\n"
        "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞—é –∞—É–¥–∏–æ (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏).",
        parse_mode="HTML"
    )


@dp.message()
async def handle_message(message: types.Message):
    text = message.text

    if not ('youtube.com' in text or 'youtu.be' in text):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ")
        return

    try:
        msg = await message.reply("‚è≥ <b>–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...</b>", parse_mode="HTML")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = await asyncio.to_thread(ydl.extract_info, text, download=True)
            filename = ydl.prepare_filename(info)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)
            with open(filename, 'rb') as audio:
                await message.reply_audio(
                    audio=types.BufferedInputFile(audio.read(), filename=os.path.basename(filename)),
                    caption=f"üéß <b>{info.get('title', '–ê—É–¥–∏–æ')}</b>",
                    parse_mode="HTML"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)

        await msg.edit_text("‚úÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {str(e)}", parse_mode="HTML")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main())